<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinmintx.agent.mapper.WithdrawDepositMapper">
  <resultMap id="BaseResultMap" type="com.xinmintx.agent.model.WithdrawDeposit">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="request_sn" jdbcType="VARCHAR" property="requestSn" />
    <result column="ret_code" jdbcType="VARCHAR" property="retCode" />
    <result column="ret_msg" jdbcType="VARCHAR" property="retMsg" />
    <result column="merchantId" jdbcType="VARCHAR" property="merchantid" />
    <result column="order_date" jdbcType="TIMESTAMP" property="orderDate" />
    <result column="order_status" jdbcType="VARCHAR" property="orderStatus" />
    <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
    <result column="txn_amt" jdbcType="VARCHAR" property="txnAmt" />
    <result column="fee" jdbcType="VARCHAR" property="fee" />
    <result column="signature" jdbcType="VARCHAR" property="signature" />
    <result column="notify_url" jdbcType="VARCHAR" property="notifyUrl" />
    <result column="sign_type" jdbcType="VARCHAR" property="signType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, request_sn, ret_code, ret_msg, merchantId, order_date, order_status, order_time, 
    txn_amt, fee, signature, notify_url, sign_type
  </sql>
  <select id="selectByExample" parameterType="com.xinmintx.agent.model.WithdrawDepositExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from withdraw_deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from withdraw_deposit
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from withdraw_deposit
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xinmintx.agent.model.WithdrawDepositExample">
    delete from withdraw_deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.agent.model.WithdrawDeposit" useGeneratedKeys="true">
    insert into withdraw_deposit (request_sn, ret_code, ret_msg, 
      merchantId, order_date, order_status, 
      order_time, txn_amt, fee, 
      signature, notify_url, sign_type
      )
    values (#{requestSn,jdbcType=VARCHAR}, #{retCode,jdbcType=VARCHAR}, #{retMsg,jdbcType=VARCHAR}, 
      #{merchantid,jdbcType=VARCHAR}, #{orderDate,jdbcType=TIMESTAMP}, #{orderStatus,jdbcType=VARCHAR}, 
      #{orderTime,jdbcType=TIMESTAMP}, #{txnAmt,jdbcType=VARCHAR}, #{fee,jdbcType=VARCHAR}, 
      #{signature,jdbcType=VARCHAR}, #{notifyUrl,jdbcType=VARCHAR}, #{signType,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.agent.model.WithdrawDeposit" useGeneratedKeys="true">
    insert into withdraw_deposit
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="requestSn != null">
        request_sn,
      </if>
      <if test="retCode != null">
        ret_code,
      </if>
      <if test="retMsg != null">
        ret_msg,
      </if>
      <if test="merchantid != null">
        merchantId,
      </if>
      <if test="orderDate != null">
        order_date,
      </if>
      <if test="orderStatus != null">
        order_status,
      </if>
      <if test="orderTime != null">
        order_time,
      </if>
      <if test="txnAmt != null">
        txn_amt,
      </if>
      <if test="fee != null">
        fee,
      </if>
      <if test="signature != null">
        signature,
      </if>
      <if test="notifyUrl != null">
        notify_url,
      </if>
      <if test="signType != null">
        sign_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="requestSn != null">
        #{requestSn,jdbcType=VARCHAR},
      </if>
      <if test="retCode != null">
        #{retCode,jdbcType=VARCHAR},
      </if>
      <if test="retMsg != null">
        #{retMsg,jdbcType=VARCHAR},
      </if>
      <if test="merchantid != null">
        #{merchantid,jdbcType=VARCHAR},
      </if>
      <if test="orderDate != null">
        #{orderDate,jdbcType=TIMESTAMP},
      </if>
      <if test="orderStatus != null">
        #{orderStatus,jdbcType=VARCHAR},
      </if>
      <if test="orderTime != null">
        #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="txnAmt != null">
        #{txnAmt,jdbcType=VARCHAR},
      </if>
      <if test="fee != null">
        #{fee,jdbcType=VARCHAR},
      </if>
      <if test="signature != null">
        #{signature,jdbcType=VARCHAR},
      </if>
      <if test="notifyUrl != null">
        #{notifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="signType != null">
        #{signType,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xinmintx.agent.model.WithdrawDepositExample" resultType="java.lang.Long">
    select count(*) from withdraw_deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update withdraw_deposit
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.requestSn != null">
        request_sn = #{record.requestSn,jdbcType=VARCHAR},
      </if>
      <if test="record.retCode != null">
        ret_code = #{record.retCode,jdbcType=VARCHAR},
      </if>
      <if test="record.retMsg != null">
        ret_msg = #{record.retMsg,jdbcType=VARCHAR},
      </if>
      <if test="record.merchantid != null">
        merchantId = #{record.merchantid,jdbcType=VARCHAR},
      </if>
      <if test="record.orderDate != null">
        order_date = #{record.orderDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.orderStatus != null">
        order_status = #{record.orderStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.orderTime != null">
        order_time = #{record.orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.txnAmt != null">
        txn_amt = #{record.txnAmt,jdbcType=VARCHAR},
      </if>
      <if test="record.fee != null">
        fee = #{record.fee,jdbcType=VARCHAR},
      </if>
      <if test="record.signature != null">
        signature = #{record.signature,jdbcType=VARCHAR},
      </if>
      <if test="record.notifyUrl != null">
        notify_url = #{record.notifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.signType != null">
        sign_type = #{record.signType,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update withdraw_deposit
    set id = #{record.id,jdbcType=INTEGER},
      request_sn = #{record.requestSn,jdbcType=VARCHAR},
      ret_code = #{record.retCode,jdbcType=VARCHAR},
      ret_msg = #{record.retMsg,jdbcType=VARCHAR},
      merchantId = #{record.merchantid,jdbcType=VARCHAR},
      order_date = #{record.orderDate,jdbcType=TIMESTAMP},
      order_status = #{record.orderStatus,jdbcType=VARCHAR},
      order_time = #{record.orderTime,jdbcType=TIMESTAMP},
      txn_amt = #{record.txnAmt,jdbcType=VARCHAR},
      fee = #{record.fee,jdbcType=VARCHAR},
      signature = #{record.signature,jdbcType=VARCHAR},
      notify_url = #{record.notifyUrl,jdbcType=VARCHAR},
      sign_type = #{record.signType,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xinmintx.agent.model.WithdrawDeposit">
    update withdraw_deposit
    <set>
      <if test="requestSn != null">
        request_sn = #{requestSn,jdbcType=VARCHAR},
      </if>
      <if test="retCode != null">
        ret_code = #{retCode,jdbcType=VARCHAR},
      </if>
      <if test="retMsg != null">
        ret_msg = #{retMsg,jdbcType=VARCHAR},
      </if>
      <if test="merchantid != null">
        merchantId = #{merchantid,jdbcType=VARCHAR},
      </if>
      <if test="orderDate != null">
        order_date = #{orderDate,jdbcType=TIMESTAMP},
      </if>
      <if test="orderStatus != null">
        order_status = #{orderStatus,jdbcType=VARCHAR},
      </if>
      <if test="orderTime != null">
        order_time = #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="txnAmt != null">
        txn_amt = #{txnAmt,jdbcType=VARCHAR},
      </if>
      <if test="fee != null">
        fee = #{fee,jdbcType=VARCHAR},
      </if>
      <if test="signature != null">
        signature = #{signature,jdbcType=VARCHAR},
      </if>
      <if test="notifyUrl != null">
        notify_url = #{notifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="signType != null">
        sign_type = #{signType,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xinmintx.agent.model.WithdrawDeposit">
    update withdraw_deposit
    set request_sn = #{requestSn,jdbcType=VARCHAR},
      ret_code = #{retCode,jdbcType=VARCHAR},
      ret_msg = #{retMsg,jdbcType=VARCHAR},
      merchantId = #{merchantid,jdbcType=VARCHAR},
      order_date = #{orderDate,jdbcType=TIMESTAMP},
      order_status = #{orderStatus,jdbcType=VARCHAR},
      order_time = #{orderTime,jdbcType=TIMESTAMP},
      txn_amt = #{txnAmt,jdbcType=VARCHAR},
      fee = #{fee,jdbcType=VARCHAR},
      signature = #{signature,jdbcType=VARCHAR},
      notify_url = #{notifyUrl,jdbcType=VARCHAR},
      sign_type = #{signType,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.xinmintx.agent.model.WithdrawDepositExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from withdraw_deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>