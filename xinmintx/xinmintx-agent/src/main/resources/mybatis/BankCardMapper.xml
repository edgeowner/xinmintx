<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinmintx.agent.mapper.BankCardMapper">
  <resultMap id="BaseResultMap" type="com.xinmintx.agent.model.BankCard">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="bank_card" jdbcType="VARCHAR" property="bankCard" />
    <result column="start" jdbcType="INTEGER" property="start" />
    <result column="cellphone" jdbcType="VARCHAR" property="cellphone" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_type" jdbcType="VARCHAR" property="bankType" />
    <result column="cardholder_name" jdbcType="VARCHAR" property="cardholderName" />
    <result column="common_one" jdbcType="VARCHAR" property="commonOne" />
    <result column="common_two" jdbcType="VARCHAR" property="commonTwo" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, bank_card, start, cellphone, user_id, bank_name, bank_type, cardholder_name, 
    common_one, common_two
  </sql>
  <select id="selectByExample" parameterType="com.xinmintx.agent.model.BankCardExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bank_card
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bank_card
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bank_card
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xinmintx.agent.model.BankCardExample">
    delete from bank_card
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.agent.model.BankCard" useGeneratedKeys="true">
    insert into bank_card (bank_card, start, cellphone, 
      user_id, bank_name, bank_type, 
      cardholder_name, common_one, common_two
      )
    values (#{bankCard,jdbcType=VARCHAR}, #{start,jdbcType=INTEGER}, #{cellphone,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{bankName,jdbcType=VARCHAR}, #{bankType,jdbcType=VARCHAR}, 
      #{cardholderName,jdbcType=VARCHAR}, #{commonOne,jdbcType=VARCHAR}, #{commonTwo,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.agent.model.BankCard" useGeneratedKeys="true">
    insert into bank_card
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bankCard != null">
        bank_card,
      </if>
      <if test="start != null">
        start,
      </if>
      <if test="cellphone != null">
        cellphone,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankType != null">
        bank_type,
      </if>
      <if test="cardholderName != null">
        cardholder_name,
      </if>
      <if test="commonOne != null">
        common_one,
      </if>
      <if test="commonTwo != null">
        common_two,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bankCard != null">
        #{bankCard,jdbcType=VARCHAR},
      </if>
      <if test="start != null">
        #{start,jdbcType=INTEGER},
      </if>
      <if test="cellphone != null">
        #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankType != null">
        #{bankType,jdbcType=VARCHAR},
      </if>
      <if test="cardholderName != null">
        #{cardholderName,jdbcType=VARCHAR},
      </if>
      <if test="commonOne != null">
        #{commonOne,jdbcType=VARCHAR},
      </if>
      <if test="commonTwo != null">
        #{commonTwo,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xinmintx.agent.model.BankCardExample" resultType="java.lang.Long">
    select count(*) from bank_card
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bank_card
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.bankCard != null">
        bank_card = #{record.bankCard,jdbcType=VARCHAR},
      </if>
      <if test="record.start != null">
        start = #{record.start,jdbcType=INTEGER},
      </if>
      <if test="record.cellphone != null">
        cellphone = #{record.cellphone,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.bankName != null">
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankType != null">
        bank_type = #{record.bankType,jdbcType=VARCHAR},
      </if>
      <if test="record.cardholderName != null">
        cardholder_name = #{record.cardholderName,jdbcType=VARCHAR},
      </if>
      <if test="record.commonOne != null">
        common_one = #{record.commonOne,jdbcType=VARCHAR},
      </if>
      <if test="record.commonTwo != null">
        common_two = #{record.commonTwo,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bank_card
    set id = #{record.id,jdbcType=INTEGER},
      bank_card = #{record.bankCard,jdbcType=VARCHAR},
      start = #{record.start,jdbcType=INTEGER},
      cellphone = #{record.cellphone,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      bank_type = #{record.bankType,jdbcType=VARCHAR},
      cardholder_name = #{record.cardholderName,jdbcType=VARCHAR},
      common_one = #{record.commonOne,jdbcType=VARCHAR},
      common_two = #{record.commonTwo,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xinmintx.agent.model.BankCard">
    update bank_card
    <set>
      <if test="bankCard != null">
        bank_card = #{bankCard,jdbcType=VARCHAR},
      </if>
      <if test="start != null">
        start = #{start,jdbcType=INTEGER},
      </if>
      <if test="cellphone != null">
        cellphone = #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankType != null">
        bank_type = #{bankType,jdbcType=VARCHAR},
      </if>
      <if test="cardholderName != null">
        cardholder_name = #{cardholderName,jdbcType=VARCHAR},
      </if>
      <if test="commonOne != null">
        common_one = #{commonOne,jdbcType=VARCHAR},
      </if>
      <if test="commonTwo != null">
        common_two = #{commonTwo,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xinmintx.agent.model.BankCard">
    update bank_card
    set bank_card = #{bankCard,jdbcType=VARCHAR},
      start = #{start,jdbcType=INTEGER},
      cellphone = #{cellphone,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_type = #{bankType,jdbcType=VARCHAR},
      cardholder_name = #{cardholderName,jdbcType=VARCHAR},
      common_one = #{commonOne,jdbcType=VARCHAR},
      common_two = #{commonTwo,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.xinmintx.agent.model.BankCardExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bank_card
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>