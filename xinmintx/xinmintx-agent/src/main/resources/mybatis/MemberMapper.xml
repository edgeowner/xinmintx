<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinmintx.agent.mapper.MemberMapper">
  <resultMap id="BaseResultMap" type="com.xinmintx.agent.model.Member">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="cellphone" jdbcType="VARCHAR" property="cellphone" />
    <result column="gender" jdbcType="INTEGER" property="gender" />
    <result column="idcard" jdbcType="VARCHAR" property="idcard" />
    <result column="recommender" jdbcType="INTEGER" property="recommender" />
    <result column="member_type" jdbcType="INTEGER" property="memberType" />
    <result column="is_review" jdbcType="INTEGER" property="isReview" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="openid" jdbcType="VARCHAR" property="openid" />
    <result column="token" jdbcType="VARCHAR" property="token" />
    <result column="avatar_url" jdbcType="VARCHAR" property="avatarUrl" />
    <result column="platform_count" jdbcType="INTEGER" property="platformCount" />
    <result column="merchant_count" jdbcType="INTEGER" property="merchantCount" />
    <result column="branch_office_count" jdbcType="INTEGER" property="branchOfficeCount" />
    <result column="birth_gift_count" jdbcType="INTEGER" property="birthGiftCount" />
    <result column="integral" jdbcType="INTEGER" property="integral" />
    <result column="new_currency" jdbcType="DECIMAL" property="newCurrency" />
    <result column="new_beans" jdbcType="DECIMAL" property="newBeans" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="freeze_beans" jdbcType="DECIMAL" property="freezeBeans" />
    <result column="freeze_currency" jdbcType="DECIMAL" property="freezeCurrency" />
    <result column="gift_start" jdbcType="INTEGER" property="giftStart" />
    <result column="tree_code" jdbcType="VARCHAR" property="treeCode" />
    <result column="region_code" jdbcType="VARCHAR" property="regionCode" />
    <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
    <result column="card_id" jdbcType="INTEGER" property="cardId" />
    <result column="card_status" jdbcType="INTEGER" property="cardStatus" />
    <result column="card_indate" jdbcType="TIMESTAMP" property="cardIndate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_id, name, cellphone, gender, idcard, recommender, member_type, is_review, 
    create_user, create_time, update_user, update_time, openid, token, avatar_url, platform_count, 
    merchant_count, branch_office_count, birth_gift_count, integral, new_currency, new_beans, 
    user_id, freeze_beans, freeze_currency, gift_start, tree_code, region_code, birthday, 
    card_id, card_status, card_indate
  </sql>
  <select id="selectByExample" parameterType="com.xinmintx.agent.model.MemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from member
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from member
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xinmintx.agent.model.MemberExample">
    delete from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.agent.model.Member" useGeneratedKeys="true">
    insert into member (order_id, name, cellphone, 
      gender, idcard, recommender, 
      member_type, is_review, create_user, 
      create_time, update_user, update_time, 
      openid, token, avatar_url, 
      platform_count, merchant_count, branch_office_count, 
      birth_gift_count, integral, new_currency, 
      new_beans, user_id, freeze_beans, 
      freeze_currency, gift_start, tree_code, 
      region_code, birthday, card_id, 
      card_status, card_indate)
    values (#{orderId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{cellphone,jdbcType=VARCHAR}, 
      #{gender,jdbcType=INTEGER}, #{idcard,jdbcType=VARCHAR}, #{recommender,jdbcType=INTEGER}, 
      #{memberType,jdbcType=INTEGER}, #{isReview,jdbcType=INTEGER}, #{createUser,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{openid,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{avatarUrl,jdbcType=VARCHAR}, 
      #{platformCount,jdbcType=INTEGER}, #{merchantCount,jdbcType=INTEGER}, #{branchOfficeCount,jdbcType=INTEGER}, 
      #{birthGiftCount,jdbcType=INTEGER}, #{integral,jdbcType=INTEGER}, #{newCurrency,jdbcType=DECIMAL}, 
      #{newBeans,jdbcType=DECIMAL}, #{userId,jdbcType=INTEGER}, #{freezeBeans,jdbcType=DECIMAL}, 
      #{freezeCurrency,jdbcType=DECIMAL}, #{giftStart,jdbcType=INTEGER}, #{treeCode,jdbcType=VARCHAR}, 
      #{regionCode,jdbcType=VARCHAR}, #{birthday,jdbcType=TIMESTAMP}, #{cardId,jdbcType=INTEGER}, 
      #{cardStatus,jdbcType=INTEGER}, #{cardIndate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.agent.model.Member" useGeneratedKeys="true">
    insert into member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="cellphone != null">
        cellphone,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="idcard != null">
        idcard,
      </if>
      <if test="recommender != null">
        recommender,
      </if>
      <if test="memberType != null">
        member_type,
      </if>
      <if test="isReview != null">
        is_review,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="openid != null">
        openid,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="avatarUrl != null">
        avatar_url,
      </if>
      <if test="platformCount != null">
        platform_count,
      </if>
      <if test="merchantCount != null">
        merchant_count,
      </if>
      <if test="branchOfficeCount != null">
        branch_office_count,
      </if>
      <if test="birthGiftCount != null">
        birth_gift_count,
      </if>
      <if test="integral != null">
        integral,
      </if>
      <if test="newCurrency != null">
        new_currency,
      </if>
      <if test="newBeans != null">
        new_beans,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="freezeBeans != null">
        freeze_beans,
      </if>
      <if test="freezeCurrency != null">
        freeze_currency,
      </if>
      <if test="giftStart != null">
        gift_start,
      </if>
      <if test="treeCode != null">
        tree_code,
      </if>
      <if test="regionCode != null">
        region_code,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="cardId != null">
        card_id,
      </if>
      <if test="cardStatus != null">
        card_status,
      </if>
      <if test="cardIndate != null">
        card_indate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="cellphone != null">
        #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="idcard != null">
        #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="recommender != null">
        #{recommender,jdbcType=INTEGER},
      </if>
      <if test="memberType != null">
        #{memberType,jdbcType=INTEGER},
      </if>
      <if test="isReview != null">
        #{isReview,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="openid != null">
        #{openid,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="platformCount != null">
        #{platformCount,jdbcType=INTEGER},
      </if>
      <if test="merchantCount != null">
        #{merchantCount,jdbcType=INTEGER},
      </if>
      <if test="branchOfficeCount != null">
        #{branchOfficeCount,jdbcType=INTEGER},
      </if>
      <if test="birthGiftCount != null">
        #{birthGiftCount,jdbcType=INTEGER},
      </if>
      <if test="integral != null">
        #{integral,jdbcType=INTEGER},
      </if>
      <if test="newCurrency != null">
        #{newCurrency,jdbcType=DECIMAL},
      </if>
      <if test="newBeans != null">
        #{newBeans,jdbcType=DECIMAL},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="freezeBeans != null">
        #{freezeBeans,jdbcType=DECIMAL},
      </if>
      <if test="freezeCurrency != null">
        #{freezeCurrency,jdbcType=DECIMAL},
      </if>
      <if test="giftStart != null">
        #{giftStart,jdbcType=INTEGER},
      </if>
      <if test="treeCode != null">
        #{treeCode,jdbcType=VARCHAR},
      </if>
      <if test="regionCode != null">
        #{regionCode,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="cardId != null">
        #{cardId,jdbcType=INTEGER},
      </if>
      <if test="cardStatus != null">
        #{cardStatus,jdbcType=INTEGER},
      </if>
      <if test="cardIndate != null">
        #{cardIndate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xinmintx.agent.model.MemberExample" resultType="java.lang.Long">
    select count(*) from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update member
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.cellphone != null">
        cellphone = #{record.cellphone,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=INTEGER},
      </if>
      <if test="record.idcard != null">
        idcard = #{record.idcard,jdbcType=VARCHAR},
      </if>
      <if test="record.recommender != null">
        recommender = #{record.recommender,jdbcType=INTEGER},
      </if>
      <if test="record.memberType != null">
        member_type = #{record.memberType,jdbcType=INTEGER},
      </if>
      <if test="record.isReview != null">
        is_review = #{record.isReview,jdbcType=INTEGER},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.openid != null">
        openid = #{record.openid,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.avatarUrl != null">
        avatar_url = #{record.avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.platformCount != null">
        platform_count = #{record.platformCount,jdbcType=INTEGER},
      </if>
      <if test="record.merchantCount != null">
        merchant_count = #{record.merchantCount,jdbcType=INTEGER},
      </if>
      <if test="record.branchOfficeCount != null">
        branch_office_count = #{record.branchOfficeCount,jdbcType=INTEGER},
      </if>
      <if test="record.birthGiftCount != null">
        birth_gift_count = #{record.birthGiftCount,jdbcType=INTEGER},
      </if>
      <if test="record.integral != null">
        integral = #{record.integral,jdbcType=INTEGER},
      </if>
      <if test="record.newCurrency != null">
        new_currency = #{record.newCurrency,jdbcType=DECIMAL},
      </if>
      <if test="record.newBeans != null">
        new_beans = #{record.newBeans,jdbcType=DECIMAL},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.freezeBeans != null">
        freeze_beans = #{record.freezeBeans,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeCurrency != null">
        freeze_currency = #{record.freezeCurrency,jdbcType=DECIMAL},
      </if>
      <if test="record.giftStart != null">
        gift_start = #{record.giftStart,jdbcType=INTEGER},
      </if>
      <if test="record.treeCode != null">
        tree_code = #{record.treeCode,jdbcType=VARCHAR},
      </if>
      <if test="record.regionCode != null">
        region_code = #{record.regionCode,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="record.cardId != null">
        card_id = #{record.cardId,jdbcType=INTEGER},
      </if>
      <if test="record.cardStatus != null">
        card_status = #{record.cardStatus,jdbcType=INTEGER},
      </if>
      <if test="record.cardIndate != null">
        card_indate = #{record.cardIndate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update member
    set id = #{record.id,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      cellphone = #{record.cellphone,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=INTEGER},
      idcard = #{record.idcard,jdbcType=VARCHAR},
      recommender = #{record.recommender,jdbcType=INTEGER},
      member_type = #{record.memberType,jdbcType=INTEGER},
      is_review = #{record.isReview,jdbcType=INTEGER},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      openid = #{record.openid,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      avatar_url = #{record.avatarUrl,jdbcType=VARCHAR},
      platform_count = #{record.platformCount,jdbcType=INTEGER},
      merchant_count = #{record.merchantCount,jdbcType=INTEGER},
      branch_office_count = #{record.branchOfficeCount,jdbcType=INTEGER},
      birth_gift_count = #{record.birthGiftCount,jdbcType=INTEGER},
      integral = #{record.integral,jdbcType=INTEGER},
      new_currency = #{record.newCurrency,jdbcType=DECIMAL},
      new_beans = #{record.newBeans,jdbcType=DECIMAL},
      user_id = #{record.userId,jdbcType=INTEGER},
      freeze_beans = #{record.freezeBeans,jdbcType=DECIMAL},
      freeze_currency = #{record.freezeCurrency,jdbcType=DECIMAL},
      gift_start = #{record.giftStart,jdbcType=INTEGER},
      tree_code = #{record.treeCode,jdbcType=VARCHAR},
      region_code = #{record.regionCode,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=TIMESTAMP},
      card_id = #{record.cardId,jdbcType=INTEGER},
      card_status = #{record.cardStatus,jdbcType=INTEGER},
      card_indate = #{record.cardIndate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xinmintx.agent.model.Member">
    update member
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="cellphone != null">
        cellphone = #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="idcard != null">
        idcard = #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="recommender != null">
        recommender = #{recommender,jdbcType=INTEGER},
      </if>
      <if test="memberType != null">
        member_type = #{memberType,jdbcType=INTEGER},
      </if>
      <if test="isReview != null">
        is_review = #{isReview,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="openid != null">
        openid = #{openid,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="platformCount != null">
        platform_count = #{platformCount,jdbcType=INTEGER},
      </if>
      <if test="merchantCount != null">
        merchant_count = #{merchantCount,jdbcType=INTEGER},
      </if>
      <if test="branchOfficeCount != null">
        branch_office_count = #{branchOfficeCount,jdbcType=INTEGER},
      </if>
      <if test="birthGiftCount != null">
        birth_gift_count = #{birthGiftCount,jdbcType=INTEGER},
      </if>
      <if test="integral != null">
        integral = #{integral,jdbcType=INTEGER},
      </if>
      <if test="newCurrency != null">
        new_currency = #{newCurrency,jdbcType=DECIMAL},
      </if>
      <if test="newBeans != null">
        new_beans = #{newBeans,jdbcType=DECIMAL},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="freezeBeans != null">
        freeze_beans = #{freezeBeans,jdbcType=DECIMAL},
      </if>
      <if test="freezeCurrency != null">
        freeze_currency = #{freezeCurrency,jdbcType=DECIMAL},
      </if>
      <if test="giftStart != null">
        gift_start = #{giftStart,jdbcType=INTEGER},
      </if>
      <if test="treeCode != null">
        tree_code = #{treeCode,jdbcType=VARCHAR},
      </if>
      <if test="regionCode != null">
        region_code = #{regionCode,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="cardId != null">
        card_id = #{cardId,jdbcType=INTEGER},
      </if>
      <if test="cardStatus != null">
        card_status = #{cardStatus,jdbcType=INTEGER},
      </if>
      <if test="cardIndate != null">
        card_indate = #{cardIndate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xinmintx.agent.model.Member">
    update member
    set order_id = #{orderId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      cellphone = #{cellphone,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      idcard = #{idcard,jdbcType=VARCHAR},
      recommender = #{recommender,jdbcType=INTEGER},
      member_type = #{memberType,jdbcType=INTEGER},
      is_review = #{isReview,jdbcType=INTEGER},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      openid = #{openid,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      platform_count = #{platformCount,jdbcType=INTEGER},
      merchant_count = #{merchantCount,jdbcType=INTEGER},
      branch_office_count = #{branchOfficeCount,jdbcType=INTEGER},
      birth_gift_count = #{birthGiftCount,jdbcType=INTEGER},
      integral = #{integral,jdbcType=INTEGER},
      new_currency = #{newCurrency,jdbcType=DECIMAL},
      new_beans = #{newBeans,jdbcType=DECIMAL},
      user_id = #{userId,jdbcType=INTEGER},
      freeze_beans = #{freezeBeans,jdbcType=DECIMAL},
      freeze_currency = #{freezeCurrency,jdbcType=DECIMAL},
      gift_start = #{giftStart,jdbcType=INTEGER},
      tree_code = #{treeCode,jdbcType=VARCHAR},
      region_code = #{regionCode,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      card_id = #{cardId,jdbcType=INTEGER},
      card_status = #{cardStatus,jdbcType=INTEGER},
      card_indate = #{cardIndate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.xinmintx.agent.model.MemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>