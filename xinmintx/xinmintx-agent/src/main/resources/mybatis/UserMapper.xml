<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinmintx.agent.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.xinmintx.agent.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="cellphone" jdbcType="VARCHAR" property="cellphone" />
    <result column="gender" jdbcType="INTEGER" property="gender" />
    <result column="idcard" jdbcType="VARCHAR" property="idcard" />
    <result column="recommender" jdbcType="INTEGER" property="recommender" />
    <result column="user_role" jdbcType="INTEGER" property="userRole" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="amount" jdbcType="INTEGER" property="amount" />
    <result column="company_name" jdbcType="VARCHAR" property="companyName" />
    <result column="company_address" jdbcType="VARCHAR" property="companyAddress" />
    <result column="region_name" jdbcType="VARCHAR" property="regionName" />
    <result column="region_code" jdbcType="CHAR" property="regionCode" />
    <result column="openid" jdbcType="VARCHAR" property="openid" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="refresh_token" jdbcType="VARCHAR" property="refreshToken" />
    <result column="is_review" jdbcType="INTEGER" property="isReview" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="last_login" jdbcType="TIMESTAMP" property="lastLogin" />
    <result column="partner_id" jdbcType="INTEGER" property="partnerId" />
    <result column="shareholder_id" jdbcType="INTEGER" property="shareholderId" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="common_one" jdbcType="VARCHAR" property="commonOne" />
    <result column="common_two" jdbcType="VARCHAR" property="commonTwo" />
    <result column="operatorid" jdbcType="INTEGER" property="operatorid" />
    <result column="account_start" jdbcType="INTEGER" property="accountStart" />
    <result column="account_id" jdbcType="VARCHAR" property="accountId" />
    <result column="tied_card_id" jdbcType="VARCHAR" property="tiedCardId" />
    <result column="token" jdbcType="VARCHAR" property="token" />
    <result column="lecturer_status" jdbcType="INTEGER" property="lecturerStatus" />
    <result column="lecturer_grade" jdbcType="INTEGER" property="lecturerGrade" />
    <result column="student" jdbcType="INTEGER" property="student" />
    <result column="teacher_id" jdbcType="INTEGER" property="teacherId" />
    <result column="start_agent_partner" jdbcType="INTEGER" property="startAgentPartner" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, order_id, name, cellphone, gender, idcard, recommender, user_role, status, amount, 
    company_name, company_address, region_name, region_code, openid, avatar, refresh_token, 
    is_review, create_user, create_time, update_user, update_time, last_login, partner_id, 
    shareholder_id, end_time, common_one, common_two, operatorid, account_start, account_id, 
    tied_card_id, token, lecturer_status, lecturer_grade, student, teacher_id, start_agent_partner
  </sql>
  <select id="selectByExample" parameterType="com.xinmintx.agent.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xinmintx.agent.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.agent.model.User" useGeneratedKeys="true">
    insert into user (order_id, name, cellphone, 
      gender, idcard, recommender, 
      user_role, status, amount, 
      company_name, company_address, region_name, 
      region_code, openid, avatar, 
      refresh_token, is_review, create_user, 
      create_time, update_user, update_time, 
      last_login, partner_id, shareholder_id, 
      end_time, common_one, common_two, 
      operatorid, account_start, account_id, 
      tied_card_id, token, lecturer_status, 
      lecturer_grade, student, teacher_id, 
      start_agent_partner)
    values (#{orderId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{cellphone,jdbcType=VARCHAR}, 
      #{gender,jdbcType=INTEGER}, #{idcard,jdbcType=VARCHAR}, #{recommender,jdbcType=INTEGER}, 
      #{userRole,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{amount,jdbcType=INTEGER}, 
      #{companyName,jdbcType=VARCHAR}, #{companyAddress,jdbcType=VARCHAR}, #{regionName,jdbcType=VARCHAR}, 
      #{regionCode,jdbcType=CHAR}, #{openid,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, 
      #{refreshToken,jdbcType=VARCHAR}, #{isReview,jdbcType=INTEGER}, #{createUser,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{lastLogin,jdbcType=TIMESTAMP}, #{partnerId,jdbcType=INTEGER}, #{shareholderId,jdbcType=INTEGER}, 
      #{endTime,jdbcType=TIMESTAMP}, #{commonOne,jdbcType=VARCHAR}, #{commonTwo,jdbcType=VARCHAR}, 
      #{operatorid,jdbcType=INTEGER}, #{accountStart,jdbcType=INTEGER}, #{accountId,jdbcType=VARCHAR}, 
      #{tiedCardId,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{lecturerStatus,jdbcType=INTEGER}, 
      #{lecturerGrade,jdbcType=INTEGER}, #{student,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER}, 
      #{startAgentPartner,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.agent.model.User" useGeneratedKeys="true">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="cellphone != null">
        cellphone,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="idcard != null">
        idcard,
      </if>
      <if test="recommender != null">
        recommender,
      </if>
      <if test="userRole != null">
        user_role,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="companyName != null">
        company_name,
      </if>
      <if test="companyAddress != null">
        company_address,
      </if>
      <if test="regionName != null">
        region_name,
      </if>
      <if test="regionCode != null">
        region_code,
      </if>
      <if test="openid != null">
        openid,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
      <if test="refreshToken != null">
        refresh_token,
      </if>
      <if test="isReview != null">
        is_review,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="lastLogin != null">
        last_login,
      </if>
      <if test="partnerId != null">
        partner_id,
      </if>
      <if test="shareholderId != null">
        shareholder_id,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="commonOne != null">
        common_one,
      </if>
      <if test="commonTwo != null">
        common_two,
      </if>
      <if test="operatorid != null">
        operatorid,
      </if>
      <if test="accountStart != null">
        account_start,
      </if>
      <if test="accountId != null">
        account_id,
      </if>
      <if test="tiedCardId != null">
        tied_card_id,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="lecturerStatus != null">
        lecturer_status,
      </if>
      <if test="lecturerGrade != null">
        lecturer_grade,
      </if>
      <if test="student != null">
        student,
      </if>
      <if test="teacherId != null">
        teacher_id,
      </if>
      <if test="startAgentPartner != null">
        start_agent_partner,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="cellphone != null">
        #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="idcard != null">
        #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="recommender != null">
        #{recommender,jdbcType=INTEGER},
      </if>
      <if test="userRole != null">
        #{userRole,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="companyName != null">
        #{companyName,jdbcType=VARCHAR},
      </if>
      <if test="companyAddress != null">
        #{companyAddress,jdbcType=VARCHAR},
      </if>
      <if test="regionName != null">
        #{regionName,jdbcType=VARCHAR},
      </if>
      <if test="regionCode != null">
        #{regionCode,jdbcType=CHAR},
      </if>
      <if test="openid != null">
        #{openid,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="refreshToken != null">
        #{refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="isReview != null">
        #{isReview,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLogin != null">
        #{lastLogin,jdbcType=TIMESTAMP},
      </if>
      <if test="partnerId != null">
        #{partnerId,jdbcType=INTEGER},
      </if>
      <if test="shareholderId != null">
        #{shareholderId,jdbcType=INTEGER},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commonOne != null">
        #{commonOne,jdbcType=VARCHAR},
      </if>
      <if test="commonTwo != null">
        #{commonTwo,jdbcType=VARCHAR},
      </if>
      <if test="operatorid != null">
        #{operatorid,jdbcType=INTEGER},
      </if>
      <if test="accountStart != null">
        #{accountStart,jdbcType=INTEGER},
      </if>
      <if test="accountId != null">
        #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="tiedCardId != null">
        #{tiedCardId,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="lecturerStatus != null">
        #{lecturerStatus,jdbcType=INTEGER},
      </if>
      <if test="lecturerGrade != null">
        #{lecturerGrade,jdbcType=INTEGER},
      </if>
      <if test="student != null">
        #{student,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="startAgentPartner != null">
        #{startAgentPartner,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xinmintx.agent.model.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.cellphone != null">
        cellphone = #{record.cellphone,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=INTEGER},
      </if>
      <if test="record.idcard != null">
        idcard = #{record.idcard,jdbcType=VARCHAR},
      </if>
      <if test="record.recommender != null">
        recommender = #{record.recommender,jdbcType=INTEGER},
      </if>
      <if test="record.userRole != null">
        user_role = #{record.userRole,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=INTEGER},
      </if>
      <if test="record.companyName != null">
        company_name = #{record.companyName,jdbcType=VARCHAR},
      </if>
      <if test="record.companyAddress != null">
        company_address = #{record.companyAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.regionName != null">
        region_name = #{record.regionName,jdbcType=VARCHAR},
      </if>
      <if test="record.regionCode != null">
        region_code = #{record.regionCode,jdbcType=CHAR},
      </if>
      <if test="record.openid != null">
        openid = #{record.openid,jdbcType=VARCHAR},
      </if>
      <if test="record.avatar != null">
        avatar = #{record.avatar,jdbcType=VARCHAR},
      </if>
      <if test="record.refreshToken != null">
        refresh_token = #{record.refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="record.isReview != null">
        is_review = #{record.isReview,jdbcType=INTEGER},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLogin != null">
        last_login = #{record.lastLogin,jdbcType=TIMESTAMP},
      </if>
      <if test="record.partnerId != null">
        partner_id = #{record.partnerId,jdbcType=INTEGER},
      </if>
      <if test="record.shareholderId != null">
        shareholder_id = #{record.shareholderId,jdbcType=INTEGER},
      </if>
      <if test="record.endTime != null">
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.commonOne != null">
        common_one = #{record.commonOne,jdbcType=VARCHAR},
      </if>
      <if test="record.commonTwo != null">
        common_two = #{record.commonTwo,jdbcType=VARCHAR},
      </if>
      <if test="record.operatorid != null">
        operatorid = #{record.operatorid,jdbcType=INTEGER},
      </if>
      <if test="record.accountStart != null">
        account_start = #{record.accountStart,jdbcType=INTEGER},
      </if>
      <if test="record.accountId != null">
        account_id = #{record.accountId,jdbcType=VARCHAR},
      </if>
      <if test="record.tiedCardId != null">
        tied_card_id = #{record.tiedCardId,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.lecturerStatus != null">
        lecturer_status = #{record.lecturerStatus,jdbcType=INTEGER},
      </if>
      <if test="record.lecturerGrade != null">
        lecturer_grade = #{record.lecturerGrade,jdbcType=INTEGER},
      </if>
      <if test="record.student != null">
        student = #{record.student,jdbcType=INTEGER},
      </if>
      <if test="record.teacherId != null">
        teacher_id = #{record.teacherId,jdbcType=INTEGER},
      </if>
      <if test="record.startAgentPartner != null">
        start_agent_partner = #{record.startAgentPartner,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      cellphone = #{record.cellphone,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=INTEGER},
      idcard = #{record.idcard,jdbcType=VARCHAR},
      recommender = #{record.recommender,jdbcType=INTEGER},
      user_role = #{record.userRole,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=INTEGER},
      company_name = #{record.companyName,jdbcType=VARCHAR},
      company_address = #{record.companyAddress,jdbcType=VARCHAR},
      region_name = #{record.regionName,jdbcType=VARCHAR},
      region_code = #{record.regionCode,jdbcType=CHAR},
      openid = #{record.openid,jdbcType=VARCHAR},
      avatar = #{record.avatar,jdbcType=VARCHAR},
      refresh_token = #{record.refreshToken,jdbcType=VARCHAR},
      is_review = #{record.isReview,jdbcType=INTEGER},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      last_login = #{record.lastLogin,jdbcType=TIMESTAMP},
      partner_id = #{record.partnerId,jdbcType=INTEGER},
      shareholder_id = #{record.shareholderId,jdbcType=INTEGER},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      common_one = #{record.commonOne,jdbcType=VARCHAR},
      common_two = #{record.commonTwo,jdbcType=VARCHAR},
      operatorid = #{record.operatorid,jdbcType=INTEGER},
      account_start = #{record.accountStart,jdbcType=INTEGER},
      account_id = #{record.accountId,jdbcType=VARCHAR},
      tied_card_id = #{record.tiedCardId,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      lecturer_status = #{record.lecturerStatus,jdbcType=INTEGER},
      lecturer_grade = #{record.lecturerGrade,jdbcType=INTEGER},
      student = #{record.student,jdbcType=INTEGER},
      teacher_id = #{record.teacherId,jdbcType=INTEGER},
      start_agent_partner = #{record.startAgentPartner,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xinmintx.agent.model.User">
    update user
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="cellphone != null">
        cellphone = #{cellphone,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="idcard != null">
        idcard = #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="recommender != null">
        recommender = #{recommender,jdbcType=INTEGER},
      </if>
      <if test="userRole != null">
        user_role = #{userRole,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=INTEGER},
      </if>
      <if test="companyName != null">
        company_name = #{companyName,jdbcType=VARCHAR},
      </if>
      <if test="companyAddress != null">
        company_address = #{companyAddress,jdbcType=VARCHAR},
      </if>
      <if test="regionName != null">
        region_name = #{regionName,jdbcType=VARCHAR},
      </if>
      <if test="regionCode != null">
        region_code = #{regionCode,jdbcType=CHAR},
      </if>
      <if test="openid != null">
        openid = #{openid,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="refreshToken != null">
        refresh_token = #{refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="isReview != null">
        is_review = #{isReview,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLogin != null">
        last_login = #{lastLogin,jdbcType=TIMESTAMP},
      </if>
      <if test="partnerId != null">
        partner_id = #{partnerId,jdbcType=INTEGER},
      </if>
      <if test="shareholderId != null">
        shareholder_id = #{shareholderId,jdbcType=INTEGER},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commonOne != null">
        common_one = #{commonOne,jdbcType=VARCHAR},
      </if>
      <if test="commonTwo != null">
        common_two = #{commonTwo,jdbcType=VARCHAR},
      </if>
      <if test="operatorid != null">
        operatorid = #{operatorid,jdbcType=INTEGER},
      </if>
      <if test="accountStart != null">
        account_start = #{accountStart,jdbcType=INTEGER},
      </if>
      <if test="accountId != null">
        account_id = #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="tiedCardId != null">
        tied_card_id = #{tiedCardId,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="lecturerStatus != null">
        lecturer_status = #{lecturerStatus,jdbcType=INTEGER},
      </if>
      <if test="lecturerGrade != null">
        lecturer_grade = #{lecturerGrade,jdbcType=INTEGER},
      </if>
      <if test="student != null">
        student = #{student,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null">
        teacher_id = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="startAgentPartner != null">
        start_agent_partner = #{startAgentPartner,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xinmintx.agent.model.User">
    update user
    set order_id = #{orderId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      cellphone = #{cellphone,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      idcard = #{idcard,jdbcType=VARCHAR},
      recommender = #{recommender,jdbcType=INTEGER},
      user_role = #{userRole,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      amount = #{amount,jdbcType=INTEGER},
      company_name = #{companyName,jdbcType=VARCHAR},
      company_address = #{companyAddress,jdbcType=VARCHAR},
      region_name = #{regionName,jdbcType=VARCHAR},
      region_code = #{regionCode,jdbcType=CHAR},
      openid = #{openid,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      refresh_token = #{refreshToken,jdbcType=VARCHAR},
      is_review = #{isReview,jdbcType=INTEGER},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      last_login = #{lastLogin,jdbcType=TIMESTAMP},
      partner_id = #{partnerId,jdbcType=INTEGER},
      shareholder_id = #{shareholderId,jdbcType=INTEGER},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      common_one = #{commonOne,jdbcType=VARCHAR},
      common_two = #{commonTwo,jdbcType=VARCHAR},
      operatorid = #{operatorid,jdbcType=INTEGER},
      account_start = #{accountStart,jdbcType=INTEGER},
      account_id = #{accountId,jdbcType=VARCHAR},
      tied_card_id = #{tiedCardId,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      lecturer_status = #{lecturerStatus,jdbcType=INTEGER},
      lecturer_grade = #{lecturerGrade,jdbcType=INTEGER},
      student = #{student,jdbcType=INTEGER},
      teacher_id = #{teacherId,jdbcType=INTEGER},
      start_agent_partner = #{startAgentPartner,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.xinmintx.agent.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>