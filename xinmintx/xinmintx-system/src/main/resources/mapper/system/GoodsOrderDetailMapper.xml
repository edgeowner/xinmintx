<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinmintx.system.mapper.GoodsOrderDetailMapper">
  <resultMap id="BaseResultMap" type="com.xinmintx.system.domain.GoodsOrderDetail">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="sku_id" jdbcType="INTEGER" property="skuId" />
    <result column="factory_id" jdbcType="INTEGER" property="factoryId" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
    <result column="goods_name" jdbcType="VARCHAR" property="goodsName" />
    <result column="goods_pic" jdbcType="VARCHAR" property="goodsPic" />
    <result column="evaluate" jdbcType="VARCHAR" property="evaluate" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="courier_number" jdbcType="VARCHAR" property="courierNumber" />
    <result column="order_state" jdbcType="INTEGER" property="orderState" />
    <result column="total_amount" jdbcType="DECIMAL" property="totalAmount" />
    <result column="lack" jdbcType="INTEGER" property="lack" />
    <result column="weight" jdbcType="DOUBLE" property="weight" />
    <result column="if_remind" jdbcType="INTEGER" property="ifRemind" />
    <result column="refund_msg" jdbcType="VARCHAR" property="refundMsg" />
    <result column="if_pay" jdbcType="INTEGER" property="ifPay" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, member_id, order_id, goods_id, sku_id, factory_id, price, quantity, goods_name, 
    goods_pic, evaluate, create_time, update_time, courier_number, order_state, total_amount, 
    lack, weight, if_remind, refund_msg, if_pay
  </sql>
  <select id="selectByExample" parameterType="com.xinmintx.system.domain.GoodsOrderDetailExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from goods_order_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from goods_order_detail
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goods_order_detail
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xinmintx.system.domain.GoodsOrderDetailExample">
    delete from goods_order_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.system.domain.GoodsOrderDetail" useGeneratedKeys="true">
    insert into goods_order_detail (member_id, order_id, goods_id, 
      sku_id, factory_id, price, 
      quantity, goods_name, goods_pic, 
      evaluate, create_time, update_time, 
      courier_number, order_state, total_amount, 
      lack, weight, if_remind, 
      refund_msg, if_pay)
    values (#{memberId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, 
      #{skuId,jdbcType=INTEGER}, #{factoryId,jdbcType=INTEGER}, #{price,jdbcType=DECIMAL}, 
      #{quantity,jdbcType=INTEGER}, #{goodsName,jdbcType=VARCHAR}, #{goodsPic,jdbcType=VARCHAR}, 
      #{evaluate,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{courierNumber,jdbcType=VARCHAR}, #{orderState,jdbcType=INTEGER}, #{totalAmount,jdbcType=DECIMAL}, 
      #{lack,jdbcType=INTEGER}, #{weight,jdbcType=DOUBLE}, #{ifRemind,jdbcType=INTEGER}, 
      #{refundMsg,jdbcType=VARCHAR}, #{ifPay,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.xinmintx.system.domain.GoodsOrderDetail" useGeneratedKeys="true">
    insert into goods_order_detail
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        member_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="skuId != null">
        sku_id,
      </if>
      <if test="factoryId != null">
        factory_id,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="quantity != null">
        quantity,
      </if>
      <if test="goodsName != null">
        goods_name,
      </if>
      <if test="goodsPic != null">
        goods_pic,
      </if>
      <if test="evaluate != null">
        evaluate,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="courierNumber != null">
        courier_number,
      </if>
      <if test="orderState != null">
        order_state,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="lack != null">
        lack,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="ifRemind != null">
        if_remind,
      </if>
      <if test="refundMsg != null">
        refund_msg,
      </if>
      <if test="ifPay != null">
        if_pay,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="skuId != null">
        #{skuId,jdbcType=INTEGER},
      </if>
      <if test="factoryId != null">
        #{factoryId,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="quantity != null">
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="goodsName != null">
        #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="goodsPic != null">
        #{goodsPic,jdbcType=VARCHAR},
      </if>
      <if test="evaluate != null">
        #{evaluate,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="courierNumber != null">
        #{courierNumber,jdbcType=VARCHAR},
      </if>
      <if test="orderState != null">
        #{orderState,jdbcType=INTEGER},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="lack != null">
        #{lack,jdbcType=INTEGER},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=DOUBLE},
      </if>
      <if test="ifRemind != null">
        #{ifRemind,jdbcType=INTEGER},
      </if>
      <if test="refundMsg != null">
        #{refundMsg,jdbcType=VARCHAR},
      </if>
      <if test="ifPay != null">
        #{ifPay,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xinmintx.system.domain.GoodsOrderDetailExample" resultType="java.lang.Long">
    select count(*) from goods_order_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update goods_order_detail
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.memberId != null">
        member_id = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.goodsId != null">
        goods_id = #{record.goodsId,jdbcType=INTEGER},
      </if>
      <if test="record.skuId != null">
        sku_id = #{record.skuId,jdbcType=INTEGER},
      </if>
      <if test="record.factoryId != null">
        factory_id = #{record.factoryId,jdbcType=INTEGER},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.quantity != null">
        quantity = #{record.quantity,jdbcType=INTEGER},
      </if>
      <if test="record.goodsName != null">
        goods_name = #{record.goodsName,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsPic != null">
        goods_pic = #{record.goodsPic,jdbcType=VARCHAR},
      </if>
      <if test="record.evaluate != null">
        evaluate = #{record.evaluate,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.courierNumber != null">
        courier_number = #{record.courierNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.orderState != null">
        order_state = #{record.orderState,jdbcType=INTEGER},
      </if>
      <if test="record.totalAmount != null">
        total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.lack != null">
        lack = #{record.lack,jdbcType=INTEGER},
      </if>
      <if test="record.weight != null">
        weight = #{record.weight,jdbcType=DOUBLE},
      </if>
      <if test="record.ifRemind != null">
        if_remind = #{record.ifRemind,jdbcType=INTEGER},
      </if>
      <if test="record.refundMsg != null">
        refund_msg = #{record.refundMsg,jdbcType=VARCHAR},
      </if>
      <if test="record.ifPay != null">
        if_pay = #{record.ifPay,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update goods_order_detail
    set id = #{record.id,jdbcType=INTEGER},
      member_id = #{record.memberId,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      goods_id = #{record.goodsId,jdbcType=INTEGER},
      sku_id = #{record.skuId,jdbcType=INTEGER},
      factory_id = #{record.factoryId,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL},
      quantity = #{record.quantity,jdbcType=INTEGER},
      goods_name = #{record.goodsName,jdbcType=VARCHAR},
      goods_pic = #{record.goodsPic,jdbcType=VARCHAR},
      evaluate = #{record.evaluate,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      courier_number = #{record.courierNumber,jdbcType=VARCHAR},
      order_state = #{record.orderState,jdbcType=INTEGER},
      total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      lack = #{record.lack,jdbcType=INTEGER},
      weight = #{record.weight,jdbcType=DOUBLE},
      if_remind = #{record.ifRemind,jdbcType=INTEGER},
      refund_msg = #{record.refundMsg,jdbcType=VARCHAR},
      if_pay = #{record.ifPay,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xinmintx.system.domain.GoodsOrderDetail">
    update goods_order_detail
    <set>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="skuId != null">
        sku_id = #{skuId,jdbcType=INTEGER},
      </if>
      <if test="factoryId != null">
        factory_id = #{factoryId,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="quantity != null">
        quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="goodsName != null">
        goods_name = #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="goodsPic != null">
        goods_pic = #{goodsPic,jdbcType=VARCHAR},
      </if>
      <if test="evaluate != null">
        evaluate = #{evaluate,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="courierNumber != null">
        courier_number = #{courierNumber,jdbcType=VARCHAR},
      </if>
      <if test="orderState != null">
        order_state = #{orderState,jdbcType=INTEGER},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="lack != null">
        lack = #{lack,jdbcType=INTEGER},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=DOUBLE},
      </if>
      <if test="ifRemind != null">
        if_remind = #{ifRemind,jdbcType=INTEGER},
      </if>
      <if test="refundMsg != null">
        refund_msg = #{refundMsg,jdbcType=VARCHAR},
      </if>
      <if test="ifPay != null">
        if_pay = #{ifPay,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xinmintx.system.domain.GoodsOrderDetail">
    update goods_order_detail
    set member_id = #{memberId,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=INTEGER},
      goods_id = #{goodsId,jdbcType=INTEGER},
      sku_id = #{skuId,jdbcType=INTEGER},
      factory_id = #{factoryId,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL},
      quantity = #{quantity,jdbcType=INTEGER},
      goods_name = #{goodsName,jdbcType=VARCHAR},
      goods_pic = #{goodsPic,jdbcType=VARCHAR},
      evaluate = #{evaluate,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      courier_number = #{courierNumber,jdbcType=VARCHAR},
      order_state = #{orderState,jdbcType=INTEGER},
      total_amount = #{totalAmount,jdbcType=DECIMAL},
      lack = #{lack,jdbcType=INTEGER},
      weight = #{weight,jdbcType=DOUBLE},
      if_remind = #{ifRemind,jdbcType=INTEGER},
      refund_msg = #{refundMsg,jdbcType=VARCHAR},
      if_pay = #{ifPay,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.xinmintx.system.domain.GoodsOrderDetailExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from goods_order_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>